// AUTOGENERATED by svfc.
#pragma once
#include <cstdint>

namespace svf {

#ifndef SVF_AUTOGENERATED_COMMON_TYPES
#define SVF_AUTOGENERATED_COMMON_TYPES
using U8 = uint8_t;
using U16 = uint16_t;
using U32 = uint32_t;
using U64 = uint64_t;

using I8 = int8_t;
using I16 = int16_t;
using I32 = int32_t;
using I64 = int64_t;

using F32 = float;
using F64 = double;

template<typename T>
struct Array {
  uint32_t pointer_offset;
  uint32_t count;
};
#endif // SVF_AUTOGENERATED_COMMON_TYPES

namespace svf_meta {
#pragma pack(push, 1)

// Forward declarations
struct Schema;
struct ChoiceDefinition;
struct ConcreteType_dot_defined;
struct StructDefinition;
enum class ConcreteType_enum;
union ConcreteType_union;
struct Type_dot_flexible_array;
struct Type_dot_concrete;
struct Type_dot_pointer;
enum class Type_enum;
union Type_union;
struct OptionDefinition;
struct FieldDefinition;

// Hashes of top level definition names
U64 const Schema_name_hash = 0x5DF4EB1350801A96ull;
U64 const ChoiceDefinition_name_hash = 0x2240FF3EC854982Full;
U64 const ConcreteType_dot_defined_name_hash = 0x4DFC442616B80464ull;
U64 const StructDefinition_name_hash = 0x713C0B32A28A6581ull;
U64 const ConcreteType_name_hash = 0x698D4BD276D7869Eull;
U64 const Type_dot_flexible_array_name_hash = 0x80D402D4DFCA5AC3ull;
U64 const Type_dot_concrete_name_hash = 0xD52542288532EF0Dull;
U64 const Type_dot_pointer_name_hash = 0x1112B5AB620370AFull;
U64 const Type_name_hash = 0xD2223AFB7D6B100Dull;
U64 const OptionDefinition_name_hash = 0x1F70FAEE117DDC5Dull;
U64 const FieldDefinition_name_hash = 0xDF03D0229D043C3Aull;

// Full declarations
struct Schema {
  U64 name_hash;
  Array<StructDefinition> structs;
  Array<ChoiceDefinition> choices;
};

struct ChoiceDefinition {
  U64 name_hash;
  Array<OptionDefinition> options;
};

struct ConcreteType_dot_defined {
  U64 top_level_definition_name_hash;
};

struct StructDefinition {
  U64 name_hash;
  Array<FieldDefinition> fields;
};

enum class ConcreteType_enum {
  u8,
  u16,
  u32,
  u64,
  i8,
  i16,
  i32,
  i64,
  f32,
  f64,
  zero_sized,
  defined,
};

union ConcreteType_union {
  ConcreteType_dot_defined defined;
};

struct Type_dot_flexible_array {
  ConcreteType_enum element_type_enum;
  ConcreteType_union element_type_union;
};

struct Type_dot_concrete {
  ConcreteType_enum type_enum;
  ConcreteType_union type_union;
};

struct Type_dot_pointer {
  ConcreteType_enum type_enum;
  ConcreteType_union type_union;
};

enum class Type_enum {
  concrete,
  pointer,
  flexible_array,
};

union Type_union {
  Type_dot_concrete concrete;
  Type_dot_pointer pointer;
  Type_dot_flexible_array flexible_array;
};

struct OptionDefinition {
  U64 name_hash;
  U8 index;
  Type_enum type_enum;
  Type_union type_union;
};

struct FieldDefinition {
  U64 name_hash;
  Type_enum type_enum;
  Type_union type_union;
};

#pragma pack(pop)
}

}
