// AUTOGENERATED by svfc.
#pragma once
#include <cstdint>
#include <cstddef>

namespace svf {

#ifndef SVF_COMMON_CPP_TYPES_INCLUDED
#define SVF_COMMON_CPP_TYPES_INCLUDED

using U8 = uint8_t;
using U16 = uint16_t;
using U32 = uint32_t;
using U64 = uint64_t;

using I8 = int8_t;
using I16 = int16_t;
using I32 = int32_t;
using I64 = int64_t;

using F32 = float;
using F64 = double;

#pragma pack(push, 1)

template<typename T>
struct Reference {
  U32 data_offset_complement;
};

template<typename T>
struct Sequence {
  U32 data_offset_complement;
  U32 count;
};

#pragma pack(pop)
#endif // SVF_COMMON_CPP_TYPES_INCLUDED

#ifndef SVF_COMMON_CPP_TRICKERY_INCLUDED
#define SVF_COMMON_CPP_TRICKERY_INCLUDED

template<typename T>
struct GetSchemaFromType;

#endif // SVF_COMMON_CPP_TRICKERY_INCLUDED

namespace META {
#pragma pack(push, 1)

extern U32 const struct_strides[];

namespace binary {
  size_t const size = 2101;
  extern U8 const array[];
} // namespace binary

// Forward declarations.
struct SchemaDefinition;
struct ChoiceDefinition;
struct StructDefinition;
struct ConcreteType_DefinedStruct;
struct ConcreteType_DefinedChoice;
struct Type_Concrete;
struct Type_Reference;
struct Type_Sequence;
struct OptionDefinition;
struct FieldDefinition;
enum class ConcreteType_tag: U8;
union ConcreteType_payload;
enum class Type_tag: U8;
union Type_payload;

// Indexes of structs.
U32 const SchemaDefinition_struct_index = 0;
U32 const ChoiceDefinition_struct_index = 1;
U32 const StructDefinition_struct_index = 2;
U32 const ConcreteType_DefinedStruct_struct_index = 3;
U32 const ConcreteType_DefinedChoice_struct_index = 4;
U32 const Type_Concrete_struct_index = 5;
U32 const Type_Reference_struct_index = 6;
U32 const Type_Sequence_struct_index = 7;
U32 const OptionDefinition_struct_index = 8;
U32 const FieldDefinition_struct_index = 9;

// Hashes of top level definition names.
U64 const SchemaDefinition_name_hash = 0x85B94A79B2A1A5EFull;
U64 const ChoiceDefinition_name_hash = 0x2240FF3EC854982Full;
U64 const StructDefinition_name_hash = 0x713C0B32A28A6581ull;
U64 const ConcreteType_DefinedStruct_name_hash = 0xE1EBFBC1CB324605ull;
U64 const ConcreteType_DefinedChoice_name_hash = 0x20ADB239462DD81Full;
U64 const Type_Concrete_name_hash = 0xAD0D45DB75A2937Dull;
U64 const Type_Reference_name_hash = 0x4CE48FE156562743ull;
U64 const Type_Sequence_name_hash = 0x9E1FB822B59C8E77ull;
U64 const OptionDefinition_name_hash = 0x1F70FAEE117DDC5Dull;
U64 const FieldDefinition_name_hash = 0xDF03D0229D043C3Aull;
U64 const ConcreteType_name_hash = 0x698D4BD276D7869Eull;
U64 const Type_name_hash = 0xD2223AFB7D6B100Dull;

// Full declarations.
struct SchemaDefinition {
  U64 nameHash;
  Sequence<U8> name;
  Sequence<StructDefinition> structs;
  Sequence<ChoiceDefinition> choices;
};

struct ChoiceDefinition {
  U64 nameHash;
  Sequence<U8> name;
  U32 payloadSize;
  Sequence<OptionDefinition> options;
};

struct StructDefinition {
  U64 nameHash;
  Sequence<U8> name;
  U32 size;
  Sequence<FieldDefinition> fields;
};

struct ConcreteType_DefinedStruct {
  U32 index;
};

struct ConcreteType_DefinedChoice {
  U32 index;
};

enum class ConcreteType_tag: U8 {
  u8 = 0,
  u16 = 1,
  u32 = 2,
  u64 = 3,
  i8 = 4,
  i16 = 5,
  i32 = 6,
  i64 = 7,
  f32 = 8,
  f64 = 9,
  zeroSized = 10,
  definedStruct = 11,
  definedChoice = 12,
};

union ConcreteType_payload {
  ConcreteType_DefinedStruct definedStruct;
  ConcreteType_DefinedChoice definedChoice;
};

struct Type_Concrete {
  ConcreteType_tag type_tag;
  ConcreteType_payload type_payload;
};

struct Type_Reference {
  ConcreteType_tag type_tag;
  ConcreteType_payload type_payload;
};

struct Type_Sequence {
  ConcreteType_tag elementType_tag;
  ConcreteType_payload elementType_payload;
};

enum class Type_tag: U8 {
  concrete = 0,
  reference = 1,
  sequence = 2,
};

union Type_payload {
  Type_Concrete concrete;
  Type_Reference reference;
  Type_Sequence sequence;
};

struct OptionDefinition {
  U64 nameHash;
  Sequence<U8> name;
  U8 tag;
  Type_tag type_tag;
  Type_payload type_payload;
};

struct FieldDefinition {
  U64 nameHash;
  Sequence<U8> name;
  U32 offset;
  Type_tag type_tag;
  Type_payload type_payload;
};

#pragma pack(pop)

// C++ trickery: SchemaDescription.
struct SchemaDescription {
  template<typename T>
  struct PerType;

  static constexpr U32 *schema_struct_strides = (U32 *) struct_strides;
  static constexpr U8 *schema_binary_array = (U8 *) binary::array;
  static constexpr size_t schema_binary_size = binary::size;
  static constexpr U32 schema_struct_count = 10;
  static constexpr U32 min_read_scratch_memory_size = 187;
  static constexpr U32 compatibility_work_base = 95;
  static constexpr U64 name_hash = 0x80BE2AAF7FD058B8ull;
  static constexpr U64 content_hash = 0x2D489E1549784EF0ull;
};

// C++ trickery: SchemaDescription::PerType.
template<>
struct SchemaDescription::PerType<SchemaDefinition> {
  static constexpr U64 name_hash = SchemaDefinition_name_hash;
  static constexpr U32 index = SchemaDefinition_struct_index;
};

template<>
struct SchemaDescription::PerType<ChoiceDefinition> {
  static constexpr U64 name_hash = ChoiceDefinition_name_hash;
  static constexpr U32 index = ChoiceDefinition_struct_index;
};

template<>
struct SchemaDescription::PerType<StructDefinition> {
  static constexpr U64 name_hash = StructDefinition_name_hash;
  static constexpr U32 index = StructDefinition_struct_index;
};

template<>
struct SchemaDescription::PerType<ConcreteType_DefinedStruct> {
  static constexpr U64 name_hash = ConcreteType_DefinedStruct_name_hash;
  static constexpr U32 index = ConcreteType_DefinedStruct_struct_index;
};

template<>
struct SchemaDescription::PerType<ConcreteType_DefinedChoice> {
  static constexpr U64 name_hash = ConcreteType_DefinedChoice_name_hash;
  static constexpr U32 index = ConcreteType_DefinedChoice_struct_index;
};

template<>
struct SchemaDescription::PerType<Type_Concrete> {
  static constexpr U64 name_hash = Type_Concrete_name_hash;
  static constexpr U32 index = Type_Concrete_struct_index;
};

template<>
struct SchemaDescription::PerType<Type_Reference> {
  static constexpr U64 name_hash = Type_Reference_name_hash;
  static constexpr U32 index = Type_Reference_struct_index;
};

template<>
struct SchemaDescription::PerType<Type_Sequence> {
  static constexpr U64 name_hash = Type_Sequence_name_hash;
  static constexpr U32 index = Type_Sequence_struct_index;
};

template<>
struct SchemaDescription::PerType<OptionDefinition> {
  static constexpr U64 name_hash = OptionDefinition_name_hash;
  static constexpr U32 index = OptionDefinition_struct_index;
};

template<>
struct SchemaDescription::PerType<FieldDefinition> {
  static constexpr U64 name_hash = FieldDefinition_name_hash;
  static constexpr U32 index = FieldDefinition_struct_index;
};

} // namespace META

// C++ trickery: GetSchemaFromType.
template<>
struct GetSchemaFromType<META::SchemaDefinition> {
  using SchemaDescription = META::SchemaDescription;
};

template<>
struct GetSchemaFromType<META::ChoiceDefinition> {
  using SchemaDescription = META::SchemaDescription;
};

template<>
struct GetSchemaFromType<META::StructDefinition> {
  using SchemaDescription = META::SchemaDescription;
};

template<>
struct GetSchemaFromType<META::ConcreteType_DefinedStruct> {
  using SchemaDescription = META::SchemaDescription;
};

template<>
struct GetSchemaFromType<META::ConcreteType_DefinedChoice> {
  using SchemaDescription = META::SchemaDescription;
};

template<>
struct GetSchemaFromType<META::Type_Concrete> {
  using SchemaDescription = META::SchemaDescription;
};

template<>
struct GetSchemaFromType<META::Type_Reference> {
  using SchemaDescription = META::SchemaDescription;
};

template<>
struct GetSchemaFromType<META::Type_Sequence> {
  using SchemaDescription = META::SchemaDescription;
};

template<>
struct GetSchemaFromType<META::OptionDefinition> {
  using SchemaDescription = META::SchemaDescription;
};

template<>
struct GetSchemaFromType<META::FieldDefinition> {
  using SchemaDescription = META::SchemaDescription;
};

// Binary schema.
#if defined(SVF_INCLUDE_BINARY_SCHEMA) || defined(SVF_IMPLEMENTATION)
#ifndef SVF_META_BINARY_INCLUDED_HPP
namespace META {

U32 const struct_strides[] = {
  32,
  28,
  28,
  4,
  4,
  5,
  5,
  5,
  23,
  26
};

namespace binary {

U8 const array[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xEF, 0xA5, 0xA1, 0xB2, 0x79, 0x4A, 0xB9, 0x85,
  0x0D, 0xFD, 0xFF, 0xFF, 0x10, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x8F, 0xFD, 0xFF, 0xFF,
  0x04, 0x00, 0x00, 0x00, 0x2F, 0x98, 0x54, 0xC8,
  0x3E, 0xFF, 0x40, 0x22, 0x77, 0xFC, 0xFF, 0xFF,
  0x10, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,
  0xFD, 0xFC, 0xFF, 0xFF, 0x04, 0x00, 0x00, 0x00,
  0x81, 0x65, 0x8A, 0xA2, 0x32, 0x0B, 0x3C, 0x71,
  0xE9, 0xFB, 0xFF, 0xFF, 0x10, 0x00, 0x00, 0x00,
  0x1C, 0x00, 0x00, 0x00, 0x67, 0xFC, 0xFF, 0xFF,
  0x04, 0x00, 0x00, 0x00, 0x05, 0x46, 0x32, 0xCB,
  0xC1, 0xFB, 0xEB, 0xE1, 0xBA, 0xFB, 0xFF, 0xFF,
  0x1A, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0xD9, 0xFB, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00,
  0x1F, 0xD8, 0x2D, 0x46, 0x39, 0xB2, 0xAD, 0x20,
  0x81, 0xFB, 0xFF, 0xFF, 0x1A, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0xA0, 0xFB, 0xFF, 0xFF,
  0x01, 0x00, 0x00, 0x00, 0x7D, 0x93, 0xA2, 0x75,
  0xDB, 0x45, 0x0D, 0xAD, 0xD3, 0xF9, 0xFF, 0xFF,
  0x0D, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0xF1, 0xF9, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00,
  0x43, 0x27, 0x56, 0x56, 0xE1, 0x8F, 0xE4, 0x4C,
  0xA8, 0xF9, 0xFF, 0xFF, 0x0E, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0xC6, 0xF9, 0xFF, 0xFF,
  0x01, 0x00, 0x00, 0x00, 0x77, 0x8E, 0x9C, 0xB5,
  0x22, 0xB8, 0x1F, 0x9E, 0x75, 0xF9, 0xFF, 0xFF,
  0x0D, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x9A, 0xF9, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00,
  0x5D, 0xDC, 0x7D, 0x11, 0xEE, 0xFA, 0x70, 0x1F,
  0x8B, 0xF8, 0xFF, 0xFF, 0x10, 0x00, 0x00, 0x00,
  0x17, 0x00, 0x00, 0x00, 0x06, 0xF9, 0xFF, 0xFF,
  0x04, 0x00, 0x00, 0x00, 0x3A, 0x3C, 0x04, 0x9D,
  0x22, 0xD0, 0x03, 0xDF, 0xFD, 0xF7, 0xFF, 0xFF,
  0x0F, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00,
  0x7B, 0xF8, 0xFF, 0xFF, 0x04, 0x00, 0x00, 0x00,
  0x9E, 0x86, 0xD7, 0x76, 0xD2, 0x4B, 0x8D, 0x69,
  0xFD, 0xF9, 0xFF, 0xFF, 0x0C, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x67, 0xFB, 0xFF, 0xFF,
  0x0D, 0x00, 0x00, 0x00, 0x0D, 0x10, 0x6B, 0x7D,
  0xFB, 0x3A, 0x22, 0xD2, 0x0A, 0xF9, 0xFF, 0xFF,
  0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x68, 0xF9, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00,
  0x2A, 0xA9, 0x93, 0x3F, 0x89, 0x3C, 0x73, 0x0C,
  0x27, 0xFD, 0xFF, 0xFF, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x1B, 0x63, 0x8E, 0xBA, 0xAD,
  0xBC, 0xC4, 0x1F, 0xFD, 0xFF, 0xFF, 0x04, 0x00,
  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x09, 0xA2, 0x22, 0x4C,
  0x0B, 0xEE, 0xFF, 0x1B, 0x1B, 0xFD, 0xFF, 0xFF,
  0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x02, 0x0B, 0x02, 0x00, 0x00, 0x00, 0xFF, 0x0D,
  0x9C, 0x63, 0xA9, 0x58, 0x57, 0x72, 0x14, 0xFD,
  0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x18, 0x00,
  0x00, 0x00, 0x02, 0x0B, 0x01, 0x00, 0x00, 0x00,
  0x6E, 0x61, 0x6D, 0x65, 0x48, 0x61, 0x73, 0x68,
  0x6E, 0x61, 0x6D, 0x65, 0x73, 0x74, 0x72, 0x75,
  0x63, 0x74, 0x73, 0x63, 0x68, 0x6F, 0x69, 0x63,
  0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6D, 0x61,
  0x44, 0x65, 0x66, 0x69, 0x6E, 0x69, 0x74, 0x69,
  0x6F, 0x6E, 0x2A, 0xA9, 0x93, 0x3F, 0x89, 0x3C,
  0x73, 0x0C, 0x95, 0xFC, 0xFF, 0xFF, 0x08, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x86, 0x1B, 0x63, 0x8E,
  0xBA, 0xAD, 0xBC, 0xC4, 0x8D, 0xFC, 0xFF, 0xFF,
  0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0xD1,
  0x84, 0x28, 0x1E, 0x41, 0x5A, 0x44, 0x89, 0xFC,
  0xFF, 0xFF, 0x0B, 0x00, 0x00, 0x00, 0x10, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x45, 0x87, 0xAD, 0x44, 0x66, 0xF4, 0x45, 0xCA,
  0x7E, 0xFC, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x02, 0x0B, 0x08, 0x00,
  0x00, 0x00, 0x6E, 0x61, 0x6D, 0x65, 0x48, 0x61,
  0x73, 0x68, 0x6E, 0x61, 0x6D, 0x65, 0x70, 0x61,
  0x79, 0x6C, 0x6F, 0x61, 0x64, 0x53, 0x69, 0x7A,
  0x65, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x73,
  0x43, 0x68, 0x6F, 0x69, 0x63, 0x65, 0x44, 0x65,
  0x66, 0x69, 0x6E, 0x69, 0x74, 0x69, 0x6F, 0x6E,
  0x2A, 0xA9, 0x93, 0x3F, 0x89, 0x3C, 0x73, 0x0C,
  0xFF, 0xFB, 0xFF, 0xFF, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x1B, 0x63, 0x8E, 0xBA, 0xAD,
  0xBC, 0xC4, 0xF7, 0xFB, 0xFF, 0xFF, 0x04, 0x00,
  0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3C, 0xAE, 0x18, 0xE6,
  0x18, 0x96, 0xEA, 0x4D, 0xF3, 0xFB, 0xFF, 0xFF,
  0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x7E,
  0x84, 0x24, 0x6D, 0x59, 0x0E, 0x49, 0xEF, 0xFB,
  0xFF, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x14, 0x00,
  0x00, 0x00, 0x02, 0x0B, 0x09, 0x00, 0x00, 0x00,
  0x6E, 0x61, 0x6D, 0x65, 0x48, 0x61, 0x73, 0x68,
  0x6E, 0x61, 0x6D, 0x65, 0x73, 0x69, 0x7A, 0x65,
  0x66, 0x69, 0x65, 0x6C, 0x64, 0x73, 0x53, 0x74,
  0x72, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69,
  0x6E, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x8B, 0x46,
  0x81, 0x90, 0x8F, 0x8E, 0xCF, 0x83, 0xBF, 0xFB,
  0xFF, 0xFF, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x69, 0x6E, 0x64, 0x65, 0x78, 0x43, 0x6F, 0x6E,
  0x63, 0x72, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70,
  0x65, 0x5F, 0x44, 0x65, 0x66, 0x69, 0x6E, 0x65,
  0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x8B,
  0x46, 0x81, 0x90, 0x8F, 0x8E, 0xCF, 0x83, 0x86,
  0xFB, 0xFF, 0xFF, 0x05, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x43, 0x6F,
  0x6E, 0x63, 0x72, 0x65, 0x74, 0x65, 0x54, 0x79,
  0x70, 0x65, 0x5F, 0x44, 0x65, 0x66, 0x69, 0x6E,
  0x65, 0x64, 0x43, 0x68, 0x6F, 0x69, 0x63, 0x65,
  0xD8, 0x53, 0x67, 0xB5, 0x07, 0x82, 0xC4, 0x08,
  0x3C, 0xFA, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0xBF,
  0xF3, 0x7E, 0x3E, 0x19, 0xD3, 0x24, 0x4D, 0x3A,
  0xFA, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0xD1, 0x26,
  0x85, 0x3E, 0x19, 0xDF, 0x2B, 0x4D, 0x37, 0xFA,
  0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x0A, 0x00, 0x00, 0x00, 0x00, 0xF2, 0x66, 0x8D,
  0x3E, 0x19, 0xD3, 0x35, 0x4D, 0x34, 0xFA, 0xFF,
  0xFF, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0A,
  0x00, 0x00, 0x00, 0x00, 0x94, 0xFD, 0x5B, 0xB5,
  0x07, 0x0A, 0xB7, 0x08, 0x31, 0xFA, 0xFF, 0xFF,
  0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0A, 0x00,
  0x00, 0x00, 0x00, 0xFB, 0x86, 0x3B, 0x2B, 0x19,
  0xBF, 0xEB, 0x2A, 0x2F, 0xFA, 0xFF, 0xFF, 0x03,
  0x00, 0x00, 0x00, 0x05, 0x00, 0x0A, 0x00, 0x00,
  0x00, 0x00, 0x45, 0x91, 0x41, 0x2B, 0x19, 0xB3,
  0xF2, 0x2A, 0x2C, 0xFA, 0xFF, 0xFF, 0x03, 0x00,
  0x00, 0x00, 0x06, 0x00, 0x0A, 0x00, 0x00, 0x00,
  0x00, 0x46, 0x17, 0x33, 0x2B, 0x19, 0xAF, 0xE1,
  0x2A, 0x29, 0xFA, 0xFF, 0xFF, 0x03, 0x00, 0x00,
  0x00, 0x07, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00,
  0x44, 0x35, 0x70, 0xFF, 0x18, 0x50, 0x63, 0xDD,
  0x26, 0xFA, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0xAB,
  0xA1, 0x7E, 0xFF, 0x18, 0x4C, 0x74, 0xDD, 0x23,
  0xFA, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x09,
  0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x72, 0x52,
  0xF6, 0xE8, 0x9D, 0xB6, 0x75, 0x1E, 0x20, 0xFA,
  0xFF, 0xFF, 0x09, 0x00, 0x00, 0x00, 0x0A, 0x00,
  0x0A, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x36, 0xCE,
  0x96, 0x23, 0xC0, 0x3C, 0xC3, 0x17, 0xFA, 0xFF,
  0xFF, 0x0D, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x0B,
  0x03, 0x00, 0x00, 0x00, 0x71, 0x09, 0x00, 0x60,
  0x83, 0xDB, 0x79, 0x4C, 0x0A, 0xFA, 0xFF, 0xFF,
  0x0D, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x0B, 0x04,
  0x00, 0x00, 0x00, 0x75, 0x38, 0x75, 0x31, 0x36,
  0x75, 0x33, 0x32, 0x75, 0x36, 0x34, 0x69, 0x38,
  0x69, 0x31, 0x36, 0x69, 0x33, 0x32, 0x69, 0x36,
  0x34, 0x66, 0x33, 0x32, 0x66, 0x36, 0x34, 0x7A,
  0x65, 0x72, 0x6F, 0x53, 0x69, 0x7A, 0x65, 0x64,
  0x64, 0x65, 0x66, 0x69, 0x6E, 0x65, 0x64, 0x53,
  0x74, 0x72, 0x75, 0x63, 0x74, 0x64, 0x65, 0x66,
  0x69, 0x6E, 0x65, 0x64, 0x43, 0x68, 0x6F, 0x69,
  0x63, 0x65, 0x43, 0x6F, 0x6E, 0x63, 0x72, 0x65,
  0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2D, 0x9C,
  0xFA, 0x7B, 0xEF, 0x39, 0x94, 0xA7, 0xD7, 0xF9,
  0xFF, 0xFF, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00,
  0x74, 0x79, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
  0x5F, 0x43, 0x6F, 0x6E, 0x63, 0x72, 0x65, 0x74,
  0x65, 0x2D, 0x9C, 0xFA, 0x7B, 0xEF, 0x39, 0x94,
  0xA7, 0xAC, 0xF9, 0xFF, 0xFF, 0x04, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00,
  0x00, 0x00, 0x00, 0x74, 0x79, 0x70, 0x65, 0x54,
  0x79, 0x70, 0x65, 0x5F, 0x52, 0x65, 0x66, 0x65,
  0x72, 0x65, 0x6E, 0x63, 0x65, 0x6F, 0x6D, 0xB4,
  0x9B, 0x75, 0xFD, 0xD3, 0xA9, 0x80, 0xF9, 0xFF,
  0xFF, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x65,
  0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x54, 0x79,
  0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5F, 0x53,
  0x65, 0x71, 0x75, 0x65, 0x6E, 0x63, 0x65, 0x1E,
  0xD9, 0xC5, 0x8B, 0xC7, 0x71, 0x89, 0xCA, 0x23,
  0xF9, 0xFF, 0xFF, 0x08, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0B, 0x05, 0x00, 0x00, 0x00, 0x7A, 0xBA,
  0xA7, 0x62, 0x32, 0x10, 0x7B, 0x9A, 0x1B, 0xF9,
  0xFF, 0xFF, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x0B, 0x06, 0x00, 0x00, 0x00, 0xA8, 0x28, 0xF5,
  0x81, 0xA4, 0xAC, 0x38, 0xAA, 0x12, 0xF9, 0xFF,
  0xFF, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0B,
  0x07, 0x00, 0x00, 0x00, 0x63, 0x6F, 0x6E, 0x63,
  0x72, 0x65, 0x74, 0x65, 0x72, 0x65, 0x66, 0x65,
  0x72, 0x65, 0x6E, 0x63, 0x65, 0x73, 0x65, 0x71,
  0x75, 0x65, 0x6E, 0x63, 0x65, 0x54, 0x79, 0x70,
  0x65, 0x2A, 0xA9, 0x93, 0x3F, 0x89, 0x3C, 0x73,
  0x0C, 0x9E, 0xF8, 0xFF, 0xFF, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
  0x00, 0x00, 0x00, 0x86, 0x1B, 0x63, 0x8E, 0xBA,
  0xAD, 0xBC, 0xC4, 0x96, 0xF8, 0xFF, 0xFF, 0x04,
  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0xA4, 0x48,
  0x44, 0x19, 0xAB, 0xD7, 0x56, 0x92, 0xF8, 0xFF,
  0xFF, 0x03, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D,
  0x9C, 0xFA, 0x7B, 0xEF, 0x39, 0x94, 0xA7, 0x8F,
  0xF8, 0xFF, 0xFF, 0x04, 0x00, 0x00, 0x00, 0x11,
  0x00, 0x00, 0x00, 0x00, 0x0C, 0x01, 0x00, 0x00,
  0x00, 0x6E, 0x61, 0x6D, 0x65, 0x48, 0x61, 0x73,
  0x68, 0x6E, 0x61, 0x6D, 0x65, 0x74, 0x61, 0x67,
  0x74, 0x79, 0x70, 0x65, 0x4F, 0x70, 0x74, 0x69,
  0x6F, 0x6E, 0x44, 0x65, 0x66, 0x69, 0x6E, 0x69,
  0x74, 0x69, 0x6F, 0x6E, 0x2A, 0xA9, 0x93, 0x3F,
  0x89, 0x3C, 0x73, 0x0C, 0x13, 0xF8, 0xFF, 0xFF,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x86, 0x1B,
  0x63, 0x8E, 0xBA, 0xAD, 0xBC, 0xC4, 0x0B, 0xF8,
  0xFF, 0xFF, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xCA, 0x35, 0x94, 0x12, 0xF8, 0xB0, 0x68, 0x02,
  0x07, 0xF8, 0xFF, 0xFF, 0x06, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x2D, 0x9C, 0xFA, 0x7B, 0xEF, 0x39,
  0x94, 0xA7, 0x01, 0xF8, 0xFF, 0xFF, 0x04, 0x00,
  0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x0C,
  0x01, 0x00, 0x00, 0x00, 0x6E, 0x61, 0x6D, 0x65,
  0x48, 0x61, 0x73, 0x68, 0x6E, 0x61, 0x6D, 0x65,
  0x6F, 0x66, 0x66, 0x73, 0x65, 0x74, 0x74, 0x79,
  0x70, 0x65, 0x46, 0x69, 0x65, 0x6C, 0x64, 0x44,
  0x65, 0x66, 0x69, 0x6E, 0x69, 0x74, 0x69, 0x6F,
  0x6E, 0x4D, 0x45, 0x54, 0x41, 0xB8, 0x58, 0xD0,
  0x7F, 0xAF, 0x2A, 0xBE, 0x80, 0xEE, 0xF7, 0xFF,
  0xFF, 0x04, 0x00, 0x00, 0x00, 0xDF, 0xFE, 0xFF,
  0xFF, 0x0A, 0x00, 0x00, 0x00, 0xC7, 0xFD, 0xFF,
  0xFF, 0x02, 0x00, 0x00, 0x00
};

} // namespace binary
} // namespace META
#endif // SVF_META_BINARY_INCLUDED_HPP
#endif // defined(SVF_INCLUDE_BINARY_SCHEMA) || defined(SVF_IMPLEMENTATION)

} // namespace svf
